---
# Download and compile FFmpeg

- name: Install packages for ffmpeg building [CentOS]
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - autoconf
    - automake
    - bzip2
    - cmake
    - freetype-devel
    - gcc
    - gcc-c++
    - git
    - libtool
    - make
    - mercurial
    - pkgconfig
    - zlib-devel
  when: ansible_distribution == "CentOS"

- name: Install packages for ffmpeg building [Debian/Ubuntu]
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - autoconf
    - automake
    - build-essential
    - cmake
    - git-core
    - libass-dev
    - libfreetype6-dev
    - libsdl2-dev
    - libtool
    - libva-dev
    - libvdpau-dev
    - libvorbis-dev
    - libxcb1-dev
    - libxcb-shm0-dev
    - libxcb-xfixes0-dev
    - pkg-config
    - texinfo
    - wget
    - zlib1g-dev
  when: ansible_os_family == "Debian"

- name: Assign facts for the ffmpeg source, build, and binaries directories.
  set_fact:
    ffmpeg_source_dir: "{{ ffmpeg_compile_dir }}/source"
    ffmpeg_build_dir: "{{ ffmpeg_compile_dir }}/build"
    ffmpeg_bin_dir: "{{ ffmpeg_compile_dir }}/bin"

- name: Make ffmpeg source directory
  file:
    path: "{{ ffmpeg_source_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Make ffmpeg build directory
  file:
    path: "{{ ffmpeg_build_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Make ffmpeg binaries directory
  file:
    path: "{{ ffmpeg_bin_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

# NASM

- name: Download NASM source
  get_url:
    url: "https://www.nasm.us/pub/nasm/releasebuilds/{{ nasm_version }}/nasm-{{ nasm_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}.tar.bz2"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ nasm_checksum }}"

- name: Unarchive NASM source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"

- name: Modifiy autogen.sh to write a flag file if it has run
  lineinfile:
    path: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/autogen.sh"
    line: touch flag_autogen_run

- name: Run autogen.sh in NASM source directory
  command: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/autogen.sh"
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/flag_autogen_run"

- name: Run configure in NASM source directory
  command: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }}"
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/config.status"

- name: Run make in NASM source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/libnasm.a"
  register: nasm_make

- name: Run make install in NASM source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
  when: nasm_make.changed

# Yasm

- name: Download Yasm source
  get_url:
    url: "https://www.tortall.net/projects/yasm/releases/yasm-{{ yasm_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ yasm_checksum }}"

- name: Unarchive Yasm source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"

- name: Run configure in Yasm source directory
  command: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }}"
  args:
    chdir: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}/config.status"

- name: Run make in Yasm source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}/libyasm.a"
  register: yasm_make

- name: Run make install in Yasm source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"
  when: yasm_make.changed

# x264

- name: Download x264 source
  get_url:
    url: "ftp://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-{{ x264_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ x264_checksum }}"

- name: Unarchive x264 source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"

- name: Run configure in x264 source directory
  command: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }} --enable-static --enable-pic"
  args:
    chdir: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"
    creates: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
    PKG_CONFIG_PATH: "{{ ffmpeg_build_dir }}/lib/pkgconfig"

- name: Run make in x264 source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"
    creates: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}/libx264.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: x264_make

- name: Run make install in x264 source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: x264_make.changed

# x265

- name: Download x265 source
  get_url:
    url: "https://bitbucket.org/multicoreware/x265/downloads/x265_{{ x265_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ x265_checksum }}"

- name: Unarchive x265 source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}"

- name: Run cmake for x265
  command: "cmake -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX='{{ ffmpeg_build_dir }}' -DEXECUTABLE_OUTPUT_PATH='{{ ffmpeg_bin_dir }}' -DENABLE_SHARED=off {{ ffmpeg_source_dir }}/x265_{{ x265_version }}/source"
  args:
    chdir: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux"
    creates: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux/x265_config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in x265 source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux"
    creates: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux/libx265.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: x265_make

- name: Run make install in x265 source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: x265_make.changed

# fdk-aac

- name: Download fdk-aac source
  get_url:
    url: "https://github.com/mstorsjo/fdk-aac/archive/v{{ fdk_aac_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ fdk_aac_checksum }}"

- name: Unarchive fdk-aac source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"

- name: Run autoreconf in fdk-aac source directory
  command: autoreconf -fiv
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/configure"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run configure in fdk-aac source directory
  command: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/configure --prefix={{ ffmpeg_build_dir }} --disable-shared"
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/config.status"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in fdk-aac source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/libfdk-aac.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: fdk_aac_make

- name: Run make install in fdk-aac source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: fdk_aac_make.changed

# mp3lame

- name: Download mp3lame source
  get_url:
    url: "https://sourceforge.net/projects/lame/files/lame/{{ mp3lame_version }}/lame-{{ mp3lame_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ mp3lame_checksum }}"

- name: Unarchive mp3lame source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}"

- name: Run configure in mp3lame source directory
  command: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }} --disable-shared --enable-nasm"
  args:
    chdir: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}"
    creates: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in mp3lame source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}"
    creates: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}/libmp3lame/libmp3lame.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: mp3lame_make

- name: Run make install in mp3lame source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/lame-{{ mp3lame_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: mp3lame_make.changed

# libopus

- name: Download opus source
  get_url:
    url: "https://archive.mozilla.org/pub/opus/opus-{{ opus_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ opus_checksum }}"

- name: Unarchive opus source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"

- name: Run configure in opus source directory
  command: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}/configure --prefix={{ ffmpeg_build_dir }} --disable-shared"
  args:
    chdir: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"
    #creates: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in opus source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"
    #creates: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}/libopus.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: opus_make

- name: Run make install in opus source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: opus_make.changed
